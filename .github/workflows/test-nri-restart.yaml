# >> This whole flow seems redundant with test-nri-init.yaml, let's remove
name: Test NRI Restart Functionality

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - '.github/workflows/test-nri-restart.yaml'
  pull_request:
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - '.github/workflows/test-nri-restart.yaml'
  workflow_dispatch:

jobs:
  test-restart-detection:
    name: Test Restart Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test configure+restart together
        run: |
          # Test with both configure and restart enabled
          export NRI_CONFIGURE=true
          export NRI_RESTART=true
          
          # Create mock containerd config
          sudo mkdir -p /etc/containerd
          cat | sudo tee /etc/containerd/config.toml > /dev/null << 'EOF'
          version = 2
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
          
          # Run script (will fail to restart but should configure)
          output=$(sudo -E bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "$output"
          
          # Check that configuration was attempted
          if echo "$output" | grep -q "Configuring NRI\|configuration updated"; then
            echo "✓ Configuration was attempted"
          else
            echo "✗ Configuration was not attempted"
            exit 1
          fi
          
          # Check that restart was attempted
          if echo "$output" | grep -q "Restarting\|Cannot restart.*from container\|Using nsenter"; then
            echo "✓ Restart was attempted"
          else
            echo "✗ Restart was not attempted with configure+restart both true"
            exit 1
          fi
          
          # Verify config was actually modified
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ Config file was successfully modified"
          else
            echo "✗ Config file was not modified"
            exit 1
          fi

  test-nsenter-functionality:
    name: Test nsenter Command Building
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y util-linux
      
      - name: Test nsenter detection
        run: |
          # Create a mock environment where nsenter would be used
          sudo mkdir -p /host/proc/1/ns
          # Create a fake mount namespace file
          sudo touch /host/proc/1/ns/mnt
          
          # Create a test script that checks nsenter usage
          cat > test-nsenter.sh << 'EOF'
          #!/bin/sh
          set -x
          
          # Mock the restart_containerd function to see what commands would run
          NSENTER=""
          if [ -e /host/proc/1/ns/mnt ]; then
              NSENTER="nsenter --target 1 --mount --uts --ipc --net --pid --"
              echo "INFO: Using nsenter to execute commands on host"
          fi
          
          if [ -n "$NSENTER" ]; then
              echo "✓ Would use: $NSENTER systemctl restart containerd"
          else
              echo "✗ nsenter not detected when /host/proc exists"
              exit 1
          fi
          EOF
          
          chmod +x test-nsenter.sh
          sudo ./test-nsenter.sh

  test-restart-with-docker:
    name: Test Restart with Docker Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build test container
        run: |
          # Create a Dockerfile that includes nsenter
          cat > Dockerfile.test << 'EOF'
          FROM alpine:3.19
          RUN apk add --no-cache bash sed grep util-linux
          COPY charts/collector/scripts/nri-init.sh /scripts/nri-init.sh
          RUN chmod +x /scripts/nri-init.sh
          EOF
          
          docker build -f Dockerfile.test -t nri-test:latest .
      
      - name: Test restart behavior in Docker
        run: |
          # Create a mock containerd config that will be mounted
          mkdir -p mock-etc/containerd
          cat > mock-etc/containerd/config.toml << 'EOF'
          version = 2
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
          
          # Run the init script in a container with host proc and config mounted
          docker run --rm \
            -v /proc:/host/proc:ro \
            -v $(pwd)/mock-etc/containerd:/etc/containerd \
            -e NRI_CONFIGURE=true \
            -e NRI_RESTART=true \
            nri-test:latest \
            /scripts/nri-init.sh 2>&1 | tee output.txt || true
          
          # Check that configuration happened
          if grep -q "Configuring NRI\|configuration updated" output.txt; then
            echo "✓ Configuration was performed"
          else
            echo "✗ Configuration was not performed"
            cat output.txt
            exit 1
          fi
          
          # Check that it attempts to use nsenter for restart
          if grep -q "Using nsenter\|Cannot restart.*from container\|Restarting" output.txt; then
            echo "✓ Script attempted restart with nsenter"
          else
            echo "✗ Script did not attempt restart"
            cat output.txt
            exit 1
          fi
          
          # Verify the config was actually modified
          if grep -q 'plugins."io.containerd.nri.v1.nri"' mock-etc/containerd/config.toml; then
            echo "✓ Config file was modified in container"
            cat mock-etc/containerd/config.toml
          else
            echo "✗ Config file was not modified"
            cat mock-etc/containerd/config.toml
            exit 1
          fi

  test-nsenter-with-restart:
    name: Test nsenter with Configure+Restart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test nsenter path with configure+restart
        run: |
          # Create mock environment
          sudo mkdir -p /etc/containerd
          sudo mkdir -p /host/proc/1/ns
          sudo touch /host/proc/1/ns/mnt
          
          cat | sudo tee /etc/containerd/config.toml > /dev/null << 'EOF'
          version = 2
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
          
          # Run with both configure and restart
          export NRI_CONFIGURE=true
          export NRI_RESTART=true
          
          output=$(sudo -E bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "$output"
          
          # Should configure
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ Configuration was updated"
          else
            echo "✗ Configuration was not updated"
            exit 1
          fi
          
          # Should attempt restart with nsenter
          if echo "$output" | grep -q "Using nsenter\|Restarting"; then
            echo "✓ Attempted restart with nsenter"
          else
            echo "✗ Did not attempt restart with nsenter"
            exit 1
          fi

  test-container-detection:
    name: Test Container Detection During Restart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test container detection logic
        run: |
          # Test that script correctly detects when running in container vs host
          
          # First test: No /host/proc - should warn about no nsenter
          sudo mkdir -p /etc/containerd
          cat | sudo tee /etc/containerd/config.toml > /dev/null << 'EOF'
          version = 2
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
          
          export NRI_CONFIGURE=true
          export NRI_RESTART=true
          
          output=$(sudo -E bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "=== Test without /host/proc ==="
          echo "$output"
          
          if echo "$output" | grep -q "Cannot restart.*from container\|Please restart.*manually"; then
            echo "✓ Correctly detected container environment without nsenter"
          else
            echo "✗ Did not properly handle container environment"
            exit 1
          fi
          
          # Second test: With /host/proc - should use nsenter
          sudo mkdir -p /host/proc/1/ns
          sudo touch /host/proc/1/ns/mnt
          
          output=$(sudo -E bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "=== Test with /host/proc ==="
          echo "$output"
          
          if echo "$output" | grep -q "Using nsenter"; then
            echo "✓ Correctly detected nsenter availability"
          else
            echo "✗ Did not detect nsenter availability"
            exit 1
          fi

  test-config-modification:
    name: Test Config Modification Without Restart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test configuration update without restart
        run: |
          # Create mock containerd config
          sudo mkdir -p /etc/containerd
          cat | sudo tee /etc/containerd/config.toml > /dev/null << 'EOF'
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
          
          # Run script with configure=true, restart=false
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          output=$(sudo -E bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "$output"
          
          # Check that config was modified
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ Configuration was updated"
            sudo cat /etc/containerd/config.toml
          else
            echo "✗ Configuration was not updated"
            sudo cat /etc/containerd/config.toml
            exit 1
          fi
          
          # Verify no restart was attempted
          if echo "$output" | grep -q "not restarted\|configuration updated but containerd not restarted"; then
            echo "✓ Correctly skipped restart when restart=false"
          fi