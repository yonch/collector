name: Test NRI on K3s

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'charts/collector/templates/**'
      - '.github/workflows/test-nri-k3s.yaml'
  pull_request:
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'charts/collector/templates/**'
      - '.github/workflows/test-nri-k3s.yaml'
  workflow_dispatch:

jobs:
  test-nri-k3s:
    name: Test NRI on K3s ${{ matrix.k3s_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - k3s_version: "v1.28.15+k3s1"  # Older version - NRI not enabled by default
            nri_preinstalled: false
          - k3s_version: "v1.29.10+k3s1"  # Older version - NRI not enabled by default  
            nri_preinstalled: false
          - k3s_version: "v1.30.14+k3s2"  # Latest v1.30
            nri_preinstalled: false
          - k3s_version: "v1.31.12+k3s1"  # Latest v1.31
            nri_preinstalled: false
          - k3s_version: "v1.32.8+k3s1"   # Latest v1.32
            nri_preinstalled: false
# >> Is there also a latest tag, so this workflow automatically tess releases as they become available?
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install K3s
        run: |
          echo "Installing K3s version ${{ matrix.k3s_version }}"
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="${{ matrix.k3s_version }}" sh -
          
          # Make kubectl accessible
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config || true
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $(id -u):$(id -g) ~/.kube/config
          
          # Wait for K3s to be ready
          sleep 10
          kubectl wait --for=condition=Ready nodes --all --timeout=60s
      
      - name: Check K3s containerd version
        run: |
          echo "=== K3s version info ==="
          k3s --version
          
          echo "=== Containerd version in K3s ==="
          sudo k3s ctr version || sudo k3s crictl version || echo "Could not determine containerd version"
          
          echo "=== Check for existing NRI socket ==="
          ls -la /var/run/nri/ 2>/dev/null || echo "NRI socket directory does not exist (expected)"
      
      - name: Verify K3s containerd template exists
        run: |
          echo "=== Checking K3s containerd configuration ==="
          if [ -f "/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl" ]; then
            echo "✓ K3s containerd template exists"
            echo "Template contents (first 20 lines):"
            sudo head -20 /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
          else
            echo "⚠ K3s containerd template not found at expected location"
            echo "Checking alternative locations:"
            sudo find /var/lib/rancher -name "*.toml*" -type f 2>/dev/null || true
          fi
      
      - name: Deploy collector with NRI configuration (no restart)
        run: |
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Deploy collector with NRI configuration but no restart
          helm install test-collector ./charts/collector \
            --set storage.type=local \
            --set nri.configure=true \
            --set nri.restart=false \
            --wait --timeout=2m
      
      - name: Check NRI init container logs
        run: |
          POD=$(kubectl get pod -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          
          # Wait for init container to complete
          echo "=== Waiting for init container to complete ==="
          kubectl wait --for=condition=Initialized pod/$POD --timeout=60s
          
          echo "=== NRI Init Container Logs ==="
          kubectl logs $POD -c nri-init
          
          # Check based on whether NRI should be pre-installed
          if [ "${{ matrix.nri_preinstalled }}" = "true" ]; then
            echo "=== Testing K3s with NRI pre-enabled (v1.32+) ==="
            if kubectl logs $POD -c nri-init | grep -q "NRI is already enabled and available"; then
              echo "✓ NRI detected as already enabled (expected for K3s ${{ matrix.k3s_version }})"
            else
              echo "✗ NRI should be pre-enabled in K3s ${{ matrix.k3s_version }}"
              exit 1
            fi
          else
            echo "=== Testing K3s without NRI pre-enabled (older versions) ==="
            if kubectl logs $POD -c nri-init | grep -q "K3s installation detected"; then
              echo "✓ K3s correctly detected"
            else
              echo "✗ K3s not detected"
              exit 1
            fi
            
            # Verify configuration was attempted
            if kubectl logs $POD -c nri-init | grep -q "K3s containerd template updated\|Configuring NRI for K3s"; then
              echo "✓ K3s template/config updated"
            elif kubectl logs $POD -c nri-init | grep -q "NRI section found"; then
              echo "✓ NRI already configured"
            else
              echo "✗ K3s configuration was not attempted"
              exit 1
            fi
          fi
      
      - name: Verify K3s template was modified
        run: |
          echo "=== Checking if NRI was added to K3s config ==="
          
          # Check template file if it exists
          if [ -f "/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl" ]; then
            if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl; then
              echo "✓ NRI configuration found in K3s template"
              sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
            else
              if [ "${{ matrix.nri_preinstalled }}" = "false" ]; then
                echo "✗ NRI configuration not found in K3s template (expected to be added)"
                exit 1
              else
                echo "⚠ Template file exists but no NRI config (may be in generated config)"
              fi
            fi
          fi
          
          # Also check the actual running config
          if [ -f "/var/lib/rancher/k3s/agent/etc/containerd/config.toml" ]; then
            echo "=== Checking actual containerd config ==="
            if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml; then
              echo "✓ NRI configuration found in running config"
              sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml
            else
              if [ "${{ matrix.nri_preinstalled }}" = "true" ]; then
                echo "⚠ NRI may be enabled differently in K3s ${{ matrix.k3s_version }}"
              else
                echo "⚠ NRI configuration not found in running config"
              fi
            fi
          fi
      
      - name: Test with restart enabled (careful!)
        run: |
          # Skip restart test for versions with NRI pre-enabled
          if [ "${{ matrix.nri_preinstalled }}" = "true" ]; then
            echo "=== Skipping restart test for K3s ${{ matrix.k3s_version }} ==="
            echo "NRI is already enabled, restart not needed"
            exit 0
          fi
          
          # First uninstall existing deployment
          helm uninstall test-collector
          
          # Wait for pods to terminate
          kubectl wait --for=delete pod -l app.kubernetes.io/name=collector --timeout=30s || true
          
          echo "=== Testing NRI with restart enabled ==="
          echo "Note: This will restart K3s service"
          
          # Deploy with restart enabled
          helm install test-collector-restart ./charts/collector \
            --set storage.type=local \
            --set nri.configure=true \
            --set nri.restart=true \
            --wait --timeout=3m
      
      - name: Verify NRI socket after restart
        run: |
          # Give K3s time to restart and create socket
          sleep 15
          
          echo "=== Checking for NRI socket ==="
          if [ -S "/var/run/nri/nri.sock" ]; then
            echo "✓ NRI socket exists after restart!"
            ls -la /var/run/nri/nri.sock
          else
            echo "⚠ NRI socket not found after restart"
            echo "This may be expected if K3s containerd doesn't support NRI"
          fi
          
          # Check new pod logs
          POD=$(kubectl get pod -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          echo "=== Init container logs after restart ==="
          kubectl logs $POD -c nri-init || true
      
      - name: Verify K3s is still functional
        run: |
          echo "=== Verifying K3s health after restart ==="
          
          # Check K3s service status
          sudo systemctl status k3s --no-pager || true
          
          # Check node status
          kubectl get nodes
          
          # Check system pods
          kubectl get pods -n kube-system
          
          # Verify collector deployment exists
          kubectl get pods -l app.kubernetes.io/name=collector
          
          # Note: The collector may fail to run in GitHub Actions due to eBPF limitations
          # We're primarily testing that K3s itself is still functional after NRI configuration
          if kubectl get pods -l app.kubernetes.io/name=collector --no-headers | grep -q "Running"; then
            echo "✓ Collector still running after K3s restart"
          else
            echo "⚠ Collector not running after K3s restart (may be due to GitHub Actions eBPF limitations)"
            echo "This is expected in CI environment - the important part is that K3s restarted successfully"
            kubectl describe pods -l app.kubernetes.io/name=collector || true
          fi
          
          # The key test is whether K3s is functional
          if kubectl get nodes --no-headers | grep -q "Ready"; then
            echo "✓ K3s is functional after restart with NRI configuration"
          else
            echo "✗ K3s is not functional after restart"
            exit 1
          fi
      
      - name: Cleanup
        if: always()
        run: |
          helm uninstall test-collector-restart || true
          helm uninstall test-collector || true

  test-nri-k3s-idempotency:
    name: Test NRI Script Idempotency on K3s
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install K3s
        run: |
          curl -sfL https://get.k3s.io | sh -
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $(id -u):$(id -g) ~/.kube/config
          kubectl wait --for=condition=Ready nodes --all --timeout=60s
      
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Deploy and redeploy multiple times
        run: |
          echo "=== First deployment ==="
          helm install test1 ./charts/collector \
            --set storage.type=local \
            --set nri.configure=true \
            --set nri.restart=false \
            --wait --timeout=2m
          
          # Capture template after first run (if it exists)
          if [ -f /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl ]; then
            sudo cp /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl /tmp/k3s-template-1.toml
          else
            echo "K3s template not found - may be using generated config"
            sudo k3s ctr version || echo "K3s version info not available"
            # Use the actual config file instead
            sudo cat /var/lib/rancher/k3s/agent/etc/containerd/config.toml > /tmp/k3s-template-1.toml 2>/dev/null || \
              echo "# No config found" > /tmp/k3s-template-1.toml
          fi
          
          helm uninstall test1
          kubectl wait --for=delete pod -l app.kubernetes.io/name=collector --timeout=30s || true
          
          echo "=== Second deployment ==="
          helm install test2 ./charts/collector \
            --set storage.type=local \
            --set nri.configure=true \
            --set nri.restart=false \
            --wait --timeout=2m
          
          # Capture template after second run
          if [ -f /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl ]; then
            sudo cp /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl /tmp/k3s-template-2.toml
          else
            sudo cat /var/lib/rancher/k3s/agent/etc/containerd/config.toml > /tmp/k3s-template-2.toml 2>/dev/null || \
              echo "# No config found" > /tmp/k3s-template-2.toml
          fi
          
          helm uninstall test2
          kubectl wait --for=delete pod -l app.kubernetes.io/name=collector --timeout=30s || true
          
          echo "=== Third deployment ==="
          helm install test3 ./charts/collector \
            --set storage.type=local \
            --set nri.configure=true \
            --set nri.restart=false \
            --wait --timeout=2m
          
          # Capture template after third run
          if [ -f /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl ]; then
            sudo cp /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl /tmp/k3s-template-3.toml
          else
            sudo cat /var/lib/rancher/k3s/agent/etc/containerd/config.toml > /tmp/k3s-template-3.toml 2>/dev/null || \
              echo "# No config found" > /tmp/k3s-template-3.toml
          fi
          
          # Compare all three templates - they should be identical
          echo "=== Comparing templates for idempotency ==="
          if diff /tmp/k3s-template-1.toml /tmp/k3s-template-2.toml && \
             diff /tmp/k3s-template-2.toml /tmp/k3s-template-3.toml; then
            echo "✓ K3s template remains identical across multiple deployments (idempotent)"
          else
            echo "✗ K3s template changed between deployments (not idempotent)"
            echo "=== Differences between run 1 and 2 ==="
            diff /tmp/k3s-template-1.toml /tmp/k3s-template-2.toml || true
            echo "=== Differences between run 2 and 3 ==="
            diff /tmp/k3s-template-2.toml /tmp/k3s-template-3.toml || true
            exit 1
          fi
          
          # Verify NRI is still properly configured
          if [ -f "/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl" ]; then
            # If template exists, check it
            if sudo grep -q 'disable = false' /tmp/k3s-template-3.toml; then
              echo "✓ NRI still enabled after multiple runs"
            else
              echo "✗ NRI configuration corrupted in template"
              exit 1
            fi
          else
            # No template file - check the actual config or just verify it's consistent
            if [ -s /tmp/k3s-template-3.toml ]; then
              echo "✓ Config consistent after multiple runs"
            else
              echo "⚠ Using generated config, cannot verify NRI settings"
            fi
          fi
          
          helm uninstall test3