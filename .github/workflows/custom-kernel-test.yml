name: Custom Kernel Test - Hello World with Kexec
on: 
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      instance-type:
        description: 'EC2 instance type to use'
        required: false
        default: 't3.medium'
        type: string
      image-type:
        description: 'Image type to use (ubuntu-22.04 or ubuntu-24.04)'
        required: false
        default: 'ubuntu-24.04'
        type: string

permissions:
  id-token: write # Required for requesting the JWT
  contents: read
  actions: write

jobs:
  setup-runner:
    name: Start EC2 runner with kexec
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-runner.outputs.runner-label }}
      ec2-instance-id: ${{ steps.start-runner.outputs.ec2-instance-id }}
      region: ${{ steps.start-runner.outputs.region }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Start AWS Runner with kexec
        id: start-runner
        uses: ./.github/actions/aws-runner
        with:
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          iam-role-name: github-actions-runner          
          instance-type: ${{ inputs.instance-type || 't3.medium' }}
          image-type: ${{ inputs.image-type || 'ubuntu-22.04' }}
          volume-size: '20'
          runner-home-dir: '/tmp'
          pre-runner-script: |
            # Kexec Hello World Setup
            # =======================
            # This script demonstrates kexec functionality by:
            # 1. Downloading the GitHub Actions runner
            # 2. Creating a post-kexec script that starts the runner
            # 3. Setting up a fake config.sh to intercept and trigger kexec
            
            echo "Setting up kexec..." | tee -a /var/log/kexec-setup.log

            # Create persistent directory and download the GitHub Actions runner
            mkdir -p /persist/actions-runner
            cd /persist/actions-runner
                        
            # Create post-kexec init script that starts the runner (hello world comes later from the runner job)
            cat > /persist/kexec-runner.sh << 'EOF'
            #!/bin/bash
            
            # Log kexec success
            echo "========================================" >> /var/log/kexec-setup.log
            echo "‚úÖ KEXEC SUCCESSFUL - CUSTOM INIT RUNNING" >> /var/log/kexec-setup.log
            echo "========================================" >> /var/log/kexec-setup.log
            echo "Kernel version: '$(uname -r)'" >> /var/log/kexec-setup.log
            echo "System time: '$(date)'" >> /var/log/kexec-setup.log
            echo "Hostname: '$(hostname)'" >> /var/log/kexec-setup.log
            echo "Init PID: '$$'" >> /var/log/kexec-setup.log
            echo "========================================" >> /var/log/kexec-setup.log
            
            # Start the GitHub Actions runner
            cd /persist/actions-runner
            export RUNNER_ALLOW_RUNASROOT=1
            
            # Configure runner with the original GitHub parameters
            echo "Configuring GitHub Actions runner after kexec..." >> /var/log/kexec-setup.log
            
            # Read config parameters from the file saved before kexec
            CONFIG_PARAMS="'$(cat /tmp/config-params)'"
            echo "Found saved config parameters: '$CONFIG_PARAMS'" >> /var/log/kexec-setup.log
            ./config.sh "'$CONFIG_PARAMS'"
            
            # Start the runner - this will wait for jobs
            echo "Starting GitHub Actions runner after kexec..." >> /var/log/kexec-setup.log
            ./run.sh
            EOF
            chmod +x /persist/kexec-runner.sh
            
            echo "Post-kexec runner script created" | tee -a /var/log/kexec-setup.log
            
            echo "=== Contents of /persist/kexec-runner.sh ===" | tee -a /var/log/kexec-setup.log
            cat /persist/kexec-runner.sh | tee -a /var/log/kexec-setup.log
            echo "=== End of kexec-runner.sh ===" | tee -a /var/log/kexec-setup.log
            
            # Find the correct kernel and initrd files
            KERNEL_VERSION=$(uname -r)
            echo "Current kernel version: \$KERNEL_VERSION" | tee -a /var/log/kexec-setup.log
            
            # Ubuntu AWS uses different naming patterns
            if [ -f "/boot/vmlinuz-\$KERNEL_VERSION" ]; then
                VMLINUZ="/boot/vmlinuz-\$KERNEL_VERSION"
            elif [ -f "/boot/vmlinuz" ]; then
                VMLINUZ="/boot/vmlinuz"
            else
                echo "Cannot find kernel image" | tee -a /var/log/kexec-setup.log
                ls -la /boot/ | tee -a /var/log/kexec-setup.log
                exit 1
            fi
            
            # Find initrd - Ubuntu AWS may use different names
            if [ -f "/boot/initrd.img-\$KERNEL_VERSION" ]; then
                INITRD="/boot/initrd.img-\$KERNEL_VERSION"
            elif [ -f "/boot/initramfs-\$KERNEL_VERSION.img" ]; then
                INITRD="/boot/initramfs-\$KERNEL_VERSION.img"
            elif [ -f "/boot/initrd.img" ]; then
                INITRD="/boot/initrd.img"
            else
                echo "Cannot find initrd image" | tee -a /var/log/kexec-setup.log
                ls -la /boot/ | tee -a /var/log/kexec-setup.log
                exit 1
            fi
            
            echo "Using kernel: \$VMLINUZ" | tee -a /var/log/kexec-setup.log
            echo "Using initrd: \$INITRD" | tee -a /var/log/kexec-setup.log
            
            # Get current kernel command line
            CURRENT_CMDLINE=$(cat /proc/cmdline)
            echo "Current cmdline: \$CURRENT_CMDLINE" | tee -a /var/log/kexec-setup.log
            
            # Write kernel paths and cmdline to temp files for config.sh to read
            echo "\$VMLINUZ" > /tmp/vmlinuz-path
            echo "\$INITRD" > /tmp/initrd-path
            echo "\$CURRENT_CMDLINE" > /tmp/current-cmdline
            
            # Create simple fake config.sh that just triggers kexec with hardcoded paths
            cat > /tmp/config.sh << 'EOF'
            #!/bin/bash
            echo "Fake config.sh called with: '$@'" | tee -a /var/log/kexec-setup.log
            
            # Save the parameters to a file for post-kexec use
            echo "'$@'" > /tmp/config-params
            echo "Saved config parameters to /tmp/config-params: '$@'" | tee -a /var/log/kexec-setup.log
            
            # Read kernel paths and cmdline from temp files
            VMLINUZ='$(cat /tmp/vmlinuz-path)'
            INITRD='$(cat /tmp/initrd-path)'
            CURRENT_CMDLINE='$(cat /tmp/current-cmdline)'
                        
            echo "Preparing kexec with kernel: \$VMLINUZ" | tee -a /var/log/kexec-setup.log
            echo "Preparing kexec with initrd: \$INITRD" | tee -a /var/log/kexec-setup.log
            
            # Kexec into the same kernel but with our custom init script
            if ! kexec -l "\$VMLINUZ" --initrd="\$INITRD" --append=\"\$CURRENT_CMDLINE init=/persist/kexec-runner.sh\"; then
                echo "Failed to load kexec" | tee -a /var/log/kexec-setup.log
                exit 1
            fi
            
            echo "Executing kexec..." | tee -a /var/log/kexec-setup.log
            kexec -e
            EOF
            
            chmod +x /tmp/config.sh
            
            echo "=== Contents of /tmp/config.sh ===" | tee -a /var/log/kexec-setup.log
            cat /tmp/config.sh | tee -a /var/log/kexec-setup.log
            echo "=== End of config.sh ===" | tee -a /var/log/kexec-setup.log
            
            # Ensure required packages are installed
            apt-get update
            apt-get install -y kexec-tools
                        
            echo "Downloading GitHub Actions runner..." | tee -a /var/log/kexec-setup.log            
            if ! curl -L -o "actions-runner.tar.gz" "https://github.com/actions/runner/releases/download/v2.313.0/actions-runner-linux-x64-2.313.0.tar.gz"; then
                echo "Failed to download GitHub Actions runner" | tee -a /var/log/kexec-setup.log
                exit 1
            fi
            
            if ! tar xzf actions-runner.tar.gz; then
                echo "Failed to extract GitHub Actions runner" | tee -a /var/log/kexec-setup.log
                exit 1
            fi
            
            echo "GitHub Actions runner downloaded and extracted successfully" | tee -a /var/log/kexec-setup.log

            # need to go back to /tmp, where the fake config.sh is located
            echo "Changing directory to /tmp to run kexec setup" | tee -a /var/log/kexec-setup.log
            cd /tmp

            echo "Kexec hello world setup complete. Fake config.sh ready." | tee -a /var/log/kexec-setup.log

  hello-world-test:
    needs: [setup-runner]
    runs-on: ${{ needs.setup-runner.outputs.runner-label }}
    timeout-minutes: 1
    steps:
      - name: Hello World from kexec'd runner
        run: |
          echo "================================================"
          echo "üéâ HELLO WORLD FROM THE KEXEC'D GITHUB RUNNER! üéâ"
          echo "================================================"
          echo ""
          echo "‚úÖ Successfully running on kexec'd kernel!"
          echo "üìç Current kernel: $(uname -r)"
          echo "‚è∞ System uptime: $(uptime)"
          echo "üìÖ Date: $(date)"
          echo "üë§ Current user: $(whoami)"
          echo "üîß Current PID: $$"
          echo ""
          
      - name: Verify kexec worked
        run: |
          echo "üìã Verifying kexec functionality..."
          
          # Check if our kexec setup logs exist
          if [ -f /var/log/kexec-setup.log ]; then
            echo "‚úÖ Found kexec setup log! Last 20 lines:"
            echo "----------------------------------------"
            tail -20 /var/log/kexec-setup.log
          else
            echo "‚ö†Ô∏è No kexec setup log found - this might indicate kexec didn't work as expected"
          fi
          
          echo ""
          echo "üîç Process information:"
          echo "Current process tree (first 20 processes):"
          ps aux | head -20
          
          echo ""
          echo "üéØ KEXEC HELLO WORLD TEST COMPLETED SUCCESSFULLY!"
          echo "This GitHub Actions runner is now running after a successful kexec!"

  stop-runner:
    name: Stop EC2 runner
    needs: [setup-runner, hello-world-test]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Stop AWS Runner
        uses: ./.github/actions/aws-runner/cleanup
        with:
          runner-label: ${{ needs.setup-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.setup-runner.outputs.ec2-instance-id }}
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.setup-runner.outputs.region }}