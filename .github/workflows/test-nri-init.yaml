name: Test NRI Init Container

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'images/nri-init/**'
      - 'charts/collector/templates/**'
      - 'charts/collector/values.yaml'
      - '.github/workflows/test-nri-init.yaml'
  pull_request:
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'images/nri-init/**'
      - 'charts/collector/templates/**'
      - 'charts/collector/values.yaml'
      - '.github/workflows/test-nri-init.yaml'
  workflow_dispatch:

jobs:
  validate-script:
    name: Validate NRI Init Script
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check script syntax
        run: |
          bash -n charts/collector/scripts/nri-init.sh
          echo "✓ Script syntax is valid"
      
      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './charts/collector/scripts'
          severity: warning
      
      - name: Check script permissions
        run: |
          ls -la charts/collector/scripts/nri-init.sh
          if [[ -x charts/collector/scripts/nri-init.sh ]]; then
            echo "✓ Script is executable"
          else
            echo "✗ Script is not executable"
            exit 1
          fi

  build-init-container:
    name: Build NRI Init Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build init container image
        uses: docker/build-push-action@v5
        with:
          context: ./images/nri-init
          platforms: linux/amd64
          push: false
          tags: nri-init:test # >> we do not want multiple concurrent workflows to interfere, so let's specialize this tag with the runId of the workflow. And can we set a TTL on the image as to free up storage, say 1 day.
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test container can run script
        run: |
          # Create a test script locally
          mkdir -p test-scripts
          cp charts/collector/scripts/nri-init.sh test-scripts/
          
          # Run container with script mounted
          docker run --rm \
            -v $(pwd)/test-scripts:/scripts:ro \
            -e NRI_CONFIGURE=false \
            -e NRI_RESTART=false \
            --entrypoint /bin/sh \
            nri-init:test \
            -c "ls -la /scripts && /scripts/nri-init.sh || true"

  test-nri-detection:
    name: Test NRI Detection Logic
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario:
          - name: "NRI Socket Exists"  
            setup: |
              sudo mkdir -p /var/run/nri
              # Create a unix socket instead of a regular file
              sudo python3 -c "import socket; s = socket.socket(socket.AF_UNIX); s.bind('/var/run/nri/nri.sock')"
            expected: "NRI socket found"
          - name: "NRI Socket Missing"
            setup: |
              sudo rm -rf /var/run/nri
            expected: "NRI socket not found"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup test environment
        run: ${{ matrix.scenario.setup }}
      
      - name: Run NRI detection test
        run: |
          export NRI_CONFIGURE=false
          export NRI_RESTART=false
          
          # Run script and capture output
          output=$(sudo bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "$output"
          
          # Check for expected output
          if echo "$output" | grep -q "${{ matrix.scenario.expected }}"; then
            echo "✓ Test passed: Found expected output '${{ matrix.scenario.expected }}'"
          else
            echo "✗ Test failed: Expected output '${{ matrix.scenario.expected }}' not found"
            exit 1
          fi

  test-containerd-config:
    name: Test Containerd Configuration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        containerd_version: ["1.7.20", "1.6.33"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install containerd ${{ matrix.containerd_version }}
        run: |
          # Download and install specific containerd version
          wget https://github.com/containerd/containerd/releases/download/v${{ matrix.containerd_version }}/containerd-${{ matrix.containerd_version }}-linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf containerd-${{ matrix.containerd_version }}-linux-amd64.tar.gz
          
          # Create minimal containerd config
          sudo mkdir -p /etc/containerd
          sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
      
      - name: Test NRI configuration update
        run: |
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          # Run configuration script
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Verify NRI configuration was added
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ NRI configuration added to containerd config"
            sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml
          else
            echo "✗ NRI configuration not found in containerd config"
            exit 1
          fi
          
          # Verify NRI is set to enabled
          if sudo grep -q 'disable = false' /etc/containerd/config.toml; then
            echo "✓ NRI is set to enabled"
          else
            echo "✗ NRI is not enabled"
            exit 1
          fi

  test-k3s-config:
    name: Test K3s Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create K3s-like environment
        run: |
          # Create K3s directory structure
          sudo mkdir -p /var/lib/rancher/k3s/agent/etc/containerd
          
          # Create a minimal K3s containerd template
          sudo tee /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl > /dev/null <<'EOF'
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
          
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          EOF
      
      - name: Test K3s NRI configuration
        run: |
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          # Run configuration script
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Verify NRI configuration was added to K3s template
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl; then
            echo "✓ NRI configuration added to K3s template"
            sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
          else
            echo "✗ NRI configuration not found in K3s template"
            exit 1
          fi

  test-idempotency:
    name: Test Script Idempotency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup containerd config
        run: |
          sudo mkdir -p /etc/containerd
          sudo tee /etc/containerd/config.toml > /dev/null <<'EOF'
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
      
      - name: Run script multiple times
        run: |
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          # Run script first time
          echo "=== First run ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Capture config after first run
          sudo cp /etc/containerd/config.toml /tmp/config1.toml
          
          # Run script second time
          echo "=== Second run ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Capture config after second run
          sudo cp /etc/containerd/config.toml /tmp/config2.toml
          
          # Compare configs - should be identical
          if diff /tmp/config1.toml /tmp/config2.toml; then
            echo "✓ Script is idempotent - config unchanged on second run"
          else
            echo "✗ Script is not idempotent - config changed on second run"
            exit 1
          fi
          
          # Verify NRI is still configured correctly
          if sudo grep -q 'disable = false' /etc/containerd/config.toml; then
            echo "✓ NRI still enabled after multiple runs"
          else
            echo "✗ NRI configuration corrupted"
            exit 1
          fi